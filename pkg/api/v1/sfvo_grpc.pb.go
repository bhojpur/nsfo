// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SfvoServiceClient is the client API for SfvoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SfvoServiceClient interface {
	// StartLocalVsfm starts a VSF Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the sfvo/config.yaml
	//   3. all bytes constituting the SFV Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVsfm(ctx context.Context, opts ...grpc.CallOption) (SfvoService_StartLocalVsfmClient, error)
	// StartFromPreviousVsfm starts a new VSF Manager based on a previous one.
	// If the previous VSF Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVsfm(ctx context.Context, in *StartFromPreviousVsfmRequest, opts ...grpc.CallOption) (*StartVsfmResponse, error)
	// StartVsfmRequest starts a new VSF Manager based on its specification.
	StartVsfm(ctx context.Context, in *StartVsfmRequest, opts ...grpc.CallOption) (*StartVsfmResponse, error)
	// Searches for VSF Manager(s) known to this instance
	ListVsfms(ctx context.Context, in *ListVsfmsRequest, opts ...grpc.CallOption) (*ListVsfmsResponse, error)
	// Subscribe listens to new VSF Manager(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SfvoService_SubscribeClient, error)
	// GetVsfm retrieves details of a single VSF Manager
	GetVsfm(ctx context.Context, in *GetVsfmRequest, opts ...grpc.CallOption) (*GetVsfmResponse, error)
	// Listen listens to VSF Manager updates and log output of a running VSF Manager
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (SfvoService_ListenClient, error)
	// StopVsfm stops a currently running VSF Manager
	StopVsfm(ctx context.Context, in *StopVsfmRequest, opts ...grpc.CallOption) (*StopVsfmResponse, error)
}

type sfvoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSfvoServiceClient(cc grpc.ClientConnInterface) SfvoServiceClient {
	return &sfvoServiceClient{cc}
}

func (c *sfvoServiceClient) StartLocalVsfm(ctx context.Context, opts ...grpc.CallOption) (SfvoService_StartLocalVsfmClient, error) {
	stream, err := c.cc.NewStream(ctx, &SfvoService_ServiceDesc.Streams[0], "/v1.SfvoService/StartLocalVsfm", opts...)
	if err != nil {
		return nil, err
	}
	x := &sfvoServiceStartLocalVsfmClient{stream}
	return x, nil
}

type SfvoService_StartLocalVsfmClient interface {
	Send(*StartLocalVsfmRequest) error
	CloseAndRecv() (*StartVsfmResponse, error)
	grpc.ClientStream
}

type sfvoServiceStartLocalVsfmClient struct {
	grpc.ClientStream
}

func (x *sfvoServiceStartLocalVsfmClient) Send(m *StartLocalVsfmRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sfvoServiceStartLocalVsfmClient) CloseAndRecv() (*StartVsfmResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartVsfmResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sfvoServiceClient) StartFromPreviousVsfm(ctx context.Context, in *StartFromPreviousVsfmRequest, opts ...grpc.CallOption) (*StartVsfmResponse, error) {
	out := new(StartVsfmResponse)
	err := c.cc.Invoke(ctx, "/v1.SfvoService/StartFromPreviousVsfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sfvoServiceClient) StartVsfm(ctx context.Context, in *StartVsfmRequest, opts ...grpc.CallOption) (*StartVsfmResponse, error) {
	out := new(StartVsfmResponse)
	err := c.cc.Invoke(ctx, "/v1.SfvoService/StartVsfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sfvoServiceClient) ListVsfms(ctx context.Context, in *ListVsfmsRequest, opts ...grpc.CallOption) (*ListVsfmsResponse, error) {
	out := new(ListVsfmsResponse)
	err := c.cc.Invoke(ctx, "/v1.SfvoService/ListVsfms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sfvoServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SfvoService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SfvoService_ServiceDesc.Streams[1], "/v1.SfvoService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sfvoServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SfvoService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type sfvoServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *sfvoServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sfvoServiceClient) GetVsfm(ctx context.Context, in *GetVsfmRequest, opts ...grpc.CallOption) (*GetVsfmResponse, error) {
	out := new(GetVsfmResponse)
	err := c.cc.Invoke(ctx, "/v1.SfvoService/GetVsfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sfvoServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (SfvoService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &SfvoService_ServiceDesc.Streams[2], "/v1.SfvoService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &sfvoServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SfvoService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type sfvoServiceListenClient struct {
	grpc.ClientStream
}

func (x *sfvoServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sfvoServiceClient) StopVsfm(ctx context.Context, in *StopVsfmRequest, opts ...grpc.CallOption) (*StopVsfmResponse, error) {
	out := new(StopVsfmResponse)
	err := c.cc.Invoke(ctx, "/v1.SfvoService/StopVsfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SfvoServiceServer is the server API for SfvoService service.
// All implementations must embed UnimplementedSfvoServiceServer
// for forward compatibility
type SfvoServiceServer interface {
	// StartLocalVsfm starts a VSF Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the sfvo/config.yaml
	//   3. all bytes constituting the SFV Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVsfm(SfvoService_StartLocalVsfmServer) error
	// StartFromPreviousVsfm starts a new VSF Manager based on a previous one.
	// If the previous VSF Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVsfm(context.Context, *StartFromPreviousVsfmRequest) (*StartVsfmResponse, error)
	// StartVsfmRequest starts a new VSF Manager based on its specification.
	StartVsfm(context.Context, *StartVsfmRequest) (*StartVsfmResponse, error)
	// Searches for VSF Manager(s) known to this instance
	ListVsfms(context.Context, *ListVsfmsRequest) (*ListVsfmsResponse, error)
	// Subscribe listens to new VSF Manager(s) updates
	Subscribe(*SubscribeRequest, SfvoService_SubscribeServer) error
	// GetVsfm retrieves details of a single VSF Manager
	GetVsfm(context.Context, *GetVsfmRequest) (*GetVsfmResponse, error)
	// Listen listens to VSF Manager updates and log output of a running VSF Manager
	Listen(*ListenRequest, SfvoService_ListenServer) error
	// StopVsfm stops a currently running VSF Manager
	StopVsfm(context.Context, *StopVsfmRequest) (*StopVsfmResponse, error)
	mustEmbedUnimplementedSfvoServiceServer()
}

// UnimplementedSfvoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSfvoServiceServer struct {
}

func (UnimplementedSfvoServiceServer) StartLocalVsfm(SfvoService_StartLocalVsfmServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalVsfm not implemented")
}
func (UnimplementedSfvoServiceServer) StartFromPreviousVsfm(context.Context, *StartFromPreviousVsfmRequest) (*StartVsfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousVsfm not implemented")
}
func (UnimplementedSfvoServiceServer) StartVsfm(context.Context, *StartVsfmRequest) (*StartVsfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVsfm not implemented")
}
func (UnimplementedSfvoServiceServer) ListVsfms(context.Context, *ListVsfmsRequest) (*ListVsfmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVsfms not implemented")
}
func (UnimplementedSfvoServiceServer) Subscribe(*SubscribeRequest, SfvoService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSfvoServiceServer) GetVsfm(context.Context, *GetVsfmRequest) (*GetVsfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVsfm not implemented")
}
func (UnimplementedSfvoServiceServer) Listen(*ListenRequest, SfvoService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedSfvoServiceServer) StopVsfm(context.Context, *StopVsfmRequest) (*StopVsfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVsfm not implemented")
}
func (UnimplementedSfvoServiceServer) mustEmbedUnimplementedSfvoServiceServer() {}

// UnsafeSfvoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SfvoServiceServer will
// result in compilation errors.
type UnsafeSfvoServiceServer interface {
	mustEmbedUnimplementedSfvoServiceServer()
}

func RegisterSfvoServiceServer(s grpc.ServiceRegistrar, srv SfvoServiceServer) {
	s.RegisterService(&SfvoService_ServiceDesc, srv)
}

func _SfvoService_StartLocalVsfm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SfvoServiceServer).StartLocalVsfm(&sfvoServiceStartLocalVsfmServer{stream})
}

type SfvoService_StartLocalVsfmServer interface {
	SendAndClose(*StartVsfmResponse) error
	Recv() (*StartLocalVsfmRequest, error)
	grpc.ServerStream
}

type sfvoServiceStartLocalVsfmServer struct {
	grpc.ServerStream
}

func (x *sfvoServiceStartLocalVsfmServer) SendAndClose(m *StartVsfmResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sfvoServiceStartLocalVsfmServer) Recv() (*StartLocalVsfmRequest, error) {
	m := new(StartLocalVsfmRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SfvoService_StartFromPreviousVsfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousVsfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SfvoServiceServer).StartFromPreviousVsfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SfvoService/StartFromPreviousVsfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SfvoServiceServer).StartFromPreviousVsfm(ctx, req.(*StartFromPreviousVsfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SfvoService_StartVsfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVsfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SfvoServiceServer).StartVsfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SfvoService/StartVsfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SfvoServiceServer).StartVsfm(ctx, req.(*StartVsfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SfvoService_ListVsfms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVsfmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SfvoServiceServer).ListVsfms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SfvoService/ListVsfms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SfvoServiceServer).ListVsfms(ctx, req.(*ListVsfmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SfvoService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SfvoServiceServer).Subscribe(m, &sfvoServiceSubscribeServer{stream})
}

type SfvoService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type sfvoServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *sfvoServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SfvoService_GetVsfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVsfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SfvoServiceServer).GetVsfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SfvoService/GetVsfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SfvoServiceServer).GetVsfm(ctx, req.(*GetVsfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SfvoService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SfvoServiceServer).Listen(m, &sfvoServiceListenServer{stream})
}

type SfvoService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type sfvoServiceListenServer struct {
	grpc.ServerStream
}

func (x *sfvoServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SfvoService_StopVsfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVsfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SfvoServiceServer).StopVsfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SfvoService/StopVsfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SfvoServiceServer).StopVsfm(ctx, req.(*StopVsfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SfvoService_ServiceDesc is the grpc.ServiceDesc for SfvoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SfvoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SfvoService",
	HandlerType: (*SfvoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousVsfm",
			Handler:    _SfvoService_StartFromPreviousVsfm_Handler,
		},
		{
			MethodName: "StartVsfm",
			Handler:    _SfvoService_StartVsfm_Handler,
		},
		{
			MethodName: "ListVsfms",
			Handler:    _SfvoService_ListVsfms_Handler,
		},
		{
			MethodName: "GetVsfm",
			Handler:    _SfvoService_GetVsfm_Handler,
		},
		{
			MethodName: "StopVsfm",
			Handler:    _SfvoService_StopVsfm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalVsfm",
			Handler:       _SfvoService_StartLocalVsfm_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _SfvoService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _SfvoService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sfvo.proto",
}
